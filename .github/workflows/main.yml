name: CI

on:
  push:
    branches: 
      - dev

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    name: 'Build-Quasar-Frontend'
    steps:
      # To use this repository's private action, you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: List-Dir
        run: 'ls'
      - name: Build-Quasar
        uses: ./gh-action-build-quasar # Uses an action in the root directory
        id: build-quasar
        with:
          sourcelocation: /github/workspace/qna
      - name: Upload SPA files as artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: spa
          # Directory containing files to upload
          path: ./qna/dist/spa
  build-functions:
    runs-on: [windows-latest]
    name: 'Build-Fn-Backend'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build-And-Package-Functions
        shell: pwsh
        run: cd .\deployment ; .\package-functionapp-to-zip.ps1
      - name: Upload Functions package as artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: functions
          # Directory containing files to upload
          path: ./deployment/functionpackage/qna-fn-backend.zip
  deploy-arm-templates:
    needs: [build-frontend, build-functions]
    runs-on: ubuntu-latest
    container: azuresdk/azure-powershell-core # => run step in container, as documented here: https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontainer
    name: Deploy-Arm-Templates
    steps:
      # - name: CLI-Login-To-Azure
      #  uses: Azure/login@v1
      #  with:
      #    # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
      #    creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: PWSH-Login-To-Azure
        shell: pwsh
        run: |
          Import-Module Az.Profile -Force ;
          $Password = ConvertTo-SecureString ${{ secrets.SP_PROD_DEPL_PWD }} -AsPlainText -Force ;
          $Creds = New-Object System.Management.Automation.PSCredential( '${{ secrets.SP_PROD_DEPL_APPID }}', $Password) ;
          Connect-AzAccount -ServicePrincipal -SubscriptionId '33761810-ec30-441e-ad3e-50f029e977f7' -TenantId '72f988bf-86f1-41af-91ab-2d7cd011db47' -Credential $Creds ;
          
