name: CI

env:
  SUBSCRIPTION_ID: 33761810-ec30-441e-ad3e-50f029e977f7
  TENANT_ID: 72f988bf-86f1-41af-91ab-2d7cd011db47
  AAD_CLIENT_ID: d03fc97e-cc4e-4758-944a-43fe4cf3eecc
  AAD_B2C_ISSUER: https://xstofb2c.b2clogin.com/xstofb2c.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=B2C_1_susi

on: 
  push:
    branches: 
      - dev

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    name: 'Build-Quasar-Frontend'
    steps:
      # To use this repository's private action, you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: List-Dir
        run: 'ls'
      - name: Build-Quasar
        uses: ./gh-action-build-quasar # Uses an action in the root directory
        id: build-quasar
        with:
          sourcelocation: /github/workspace/qna
      - name: Upload SPA files as artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: spa
          # Directory containing files to upload
          path: ./qna/dist/spa
  build-functions:
    runs-on: [windows-latest]
    name: 'Build-Fn-Backend'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build-And-Package-Functions
        shell: pwsh
        run: cd .\deployment ; .\package-functionapp-to-zip.ps1
      - name: Upload Functions package as artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: functions
          # Directory containing files to upload
          path: ./deployment/functionpackage/qna-fn-backend.zip
  deploy-arm-templates:
    needs: [build-frontend, build-functions]
    runs-on: ubuntu-latest
    container:
      image: azuresdk/azure-powershell-core # => run step in container, as documented here: https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontainer
    name: Deploy-Arm-Templates
    steps:
      - name: PWSH-Login-To-Azure
        shell: pwsh
        run: |
          # Install Powershell Az Module:
          Install-Module -Name Az -AllowClobber -Scope CurrentUser -SkipPublisherCheck -AcceptLicense -Force ;
          # Login to Azure:
          Add-Type -Path "/usr/local/share/powershell/Modules/Az.Profile/PreloadAssemblies/Microsoft.IdentityModel.Clients.ActiveDirectory.dll" ;
          Import-Module Az.Profile -Force ;
          $Password = ConvertTo-SecureString ${{ secrets.SP_PROD_DEPL_PWD }} -AsPlainText -Force ;
          $Creds = New-Object System.Management.Automation.PSCredential( '${{ secrets.SP_PROD_DEPL_APPID }}', $Password) ;
          Connect-AzAccount -ServicePrincipal -SubscriptionId '${{ env.SUBSCRIPTION_ID }}' -TenantId '${{ env.TENANT_ID }}' -Credential $Creds ;
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy-ARM-Template
        shell: pwsh
        run: |
          cd deployment ;
          ./deploy-infra -NameRGForNestedTemplates 'qna-qa-infra' -LocationRGForNestedTemplates westeurope  -NameStorageAcctForNestedTemplates qnaqastornestedtempl -ResourceGroupPrefix qna-qa -ArtifactPrefix qnaqa -AADClientId '${{ env.AAD_CLIENT_ID }}' -AADB2CIssuer '${{ env.AAD_B2C_ISSUER }}' ;
  deploy-static-website:
    needs: [deploy-arm-templates]
    runs-on: ubuntu-latest
    container:
      image: azuresdk/azure-powershell-core # => run step in container, as documented here: https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontainer
    name: Deploy-Static-Website
    steps:
      - name: PWSH-Login-To-Azure
        shell: pwsh
        run: |
          # Install Powershell Az Module:
          Install-Module -Name Az -AllowClobber -Scope CurrentUser -SkipPublisherCheck -AcceptLicense -Force ;
          # Login to Azure:
          Add-Type -Path "/usr/local/share/powershell/Modules/Az.Profile/PreloadAssemblies/Microsoft.IdentityModel.Clients.ActiveDirectory.dll" ;
          Import-Module Az.Profile -Force ;
          $Password = ConvertTo-SecureString ${{ secrets.SP_PROD_DEPL_PWD }} -AsPlainText -Force ;
          $Creds = New-Object System.Management.Automation.PSCredential( '${{ secrets.SP_PROD_DEPL_APPID }}', $Password) ;
          Connect-AzAccount -ServicePrincipal -SubscriptionId '${{ env.SUBSCRIPTION_ID }}' -TenantId '${{ env.TENANT_ID }}' -Credential $Creds ;
      - name: Download artifact for static SPA website
        uses: actions/upload-artifact@v1
        with:
          name: spa
          path: spa #target path
      - name: Unpack artifact
        shell: pwsh
        run: |
          ls;
          Write-Host "Move into spa directory"
          cd spa;
          ls;
