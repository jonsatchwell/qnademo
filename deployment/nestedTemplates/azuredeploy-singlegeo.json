{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "Location of nested templates"
            }
        },
        "artifactsLocationSasToken": {
            "type": "string",
            "metadata": {
                "description": "Sas token with which to access nested templates"
            }
        },
        "region": {
            "type": "string",
            "metadata": {
                "description": "Region in which to deploy this template"
            }
        },
        "regionCode": {
            "type": "string",
            "metadata": {
                "description": "Code for region in which to deploy this template"
            }
        },
        "artifactPrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for artifacts generated by this template"
            }
        },
        "frontDoorName": {
             "type": "string",
            "metadata": {
                "description": "Name for the frontdoor which will be added to APIM cors policy"
            }
        },
        "cosmosdbname": {
            "type": "string",
            "metadata": {
            "description": "Name for the cosmosdb to use as backing storage."
            }
        },
        "cosmoscollectionname": {
            "type": "string",
            "metadata": {
            "description": "Name for the cosmosdb collection to use as backing storage."
            }
        },
        "cosmosconnectionstring": {
            "type": "string",
            "metadata": {
            "description": "Connection string to cosmosdb to use as backing storage."
            }
        },
        "state": {
            "defaultValue": [],
            "type": "array",
            "metadata": {
                "description": "State param can be used for aggregating output values in case this template gets called in a copy-loop"
            }
        },
        "aadClientId": {
            "type": "string",
            "metadata": {
            "description": "Client ID of the AAD B2C Application linked to the API Auth"
            }
        },            
        "aadB2cIssuer": {
            "type": "string",
            "metadata": {
                "description": "Link to the well known Open ID Configuration for the sign in policy."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(parameters('artifactPrefix'), 'stor', parameters('regionCode'))]",
        "functionSstorageAccountName": "[concat(parameters('artifactPrefix'), 'funstor', parameters('regionCode'))]",
        "functionAppName": "[concat(parameters('artifactPrefix'), '-func-', parameters('regionCode'))]",
        "resourceGroup": "[resourceGroup().name]",
        "apimPublisherEmail": "no-email@microsoft.com",
        "apimPublisherName": "Christof",
        "apimName": "[concat(parameters('artifactPrefix'), '-apim-', parameters('regionCode'))]",
        "frontdoorCorsUrlToAddToAPIM": "[concat('https://', parameters('frontDoorName'), '.azurefd.net')]",
        "signalrName": "[concat(parameters('artifactPrefix'), '-signalr-', parameters('regionCode'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-07-01",
            "name": "[variables('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "[variables('storageAccountName')]"
            },
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2"
        },
        {
            "name": "[concat('deploy-region-', parameters('region'), '-signalr')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('artifactsLocation'), '/nestedtemplates/signalr-template.json', parameters('artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "name": {
                        "value": "[variables('signalrName')]"
                    },
                    "location": {
                        "value": "[replace(resourceGroup().location, 'northcentralus', 'centralus')]"
                    }
                }
            },
            "dependsOn": [
                
            ]
        },
        {
            "name": "[concat('deploy-region-', parameters('region'), '-functionapp')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('artifactsLocation'), '/nestedtemplates/function-template.json', parameters('artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {                  
                    "appName": {
                        "value": "[variables('functionAppName')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('functionSstorageAccountName')]"
                    },
                    "cosmosdbname": {
                        "value": "[parameters('cosmosdbname')]"
                    },
                    "cosmoscollectionname": {
                        "value": "[parameters('cosmoscollectionname')]"
                    },
                    "cosmosconnectionstring": {
                        "value": "[parameters('cosmosconnectionstring')]"
                    },
                    "signalrconnectionstring": {
                        // "value": "[listKeys(resourceId('Microsoft.SignalRService/SignalR', variables('signalrName')), providers('Microsoft.SignalRService','SignalR').apiVersions[0]).primaryConnectionString]"
                        "value": "xxxx"
                    },
                    "urlToWhitelistForCORS": {
                        "value": "[concat('https://', parameters('frontDoorName'), '.azurefd.net')]"
                    },
                    "aadClientId": {
                        "value": "[parameters('aadClientId')]"
                    },
                    "aadB2cIssuer" : {
                        "value": "[parameters('aadB2cIssuer')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('deploy-region-', parameters('region'), '-signalr')]",
                "[concat('deploy-region-', parameters('region'), '-apim')]" // not strictly needed, but in this way it takes longer and the signalrconnectionstring will be ready by then (race condition)
            ]
        },
        {
            "name": "[concat('deploy-region-', parameters('region'), '-apim')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('artifactsLocation'), '/nestedtemplates/apim-template.json', parameters('artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "artifactsLocation": {
                        "value": "[parameters('artifactsLocation')]"
                    },
                    "artifactsLocationSasToken": {
                        "value": "[parameters('artifactsLocationSasToken')]"
                    },     
                    "name": {
                        "value": "[variables('apimName')]"
                    },             
                    "publisherEmail": {
                        "value": "[variables('apimPublisherEmail')]" 
                    },
                    "publisherName": {
                        "value": "[variables('apimPublisherName')]"
                    }
                }
            },
            "dependsOn":[
                "[concat('deploy-region-', parameters('region'), '-functionapp')]"
            ]
        },
        {
            "name": "[concat('deploy-region-', parameters('region'), '-apim-backends')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('artifactsLocation'), '/nestedtemplates/apim-backends-template.json', parameters('artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "ApimServiceName": {
                        "value": "[variables('apimName')]"
                    },
                    "ApimBackendName": {
                        "value": "[variables('functionAppName')]"
                    },
                    "FunctionResourceId": {
                        "value": "[concat('https://management.azure.com', resourceId('Microsoft.Web/sites', variables('functionAppName')))]"
                    },
                    "FunctionsKey": {
                        // listkeys can fail the ARM template as not guaranteed available as soon as template for function completed
                        // not really needed in this scenario anyway - all functions are either open or protected over oauth2
                        // "value": "[listkeys(resourceId('Microsoft.Web/sites/host/', variables('functionAppName'), 'default'), '2018-11-01').masterKey]"
                        "value": "xxxx"
                    },
                    "FunctionResourceUrl": {
                        "value": "[concat('https://', variables('functionAppName'), '.azurewebsites.net/api')]" 
                    }
                }
            },
            "dependsOn": [
                "[concat('deploy-region-', parameters('region'), '-apim')]",
                "[concat('deploy-region-', parameters('region'), '-functionapp')]"
                //added this one in - now apim-api's get deployed first, then apim-backends
                //"[concat('deploy-region-', parameters('region'), '-apim-apis')]"
            ]
        },
        {
            "name": "[concat('deploy-region-', parameters('region'), '-apim-apis')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('artifactsLocation'), '/nestedtemplates/apim-apis-template.json', parameters('artifactsLocationSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "ApimServiceName": {
                        "value": "[variables('apimName')]"
                    },
                    "FunctionAppName": {
                        "value": "[variables('functionAppName')]"
                    },
                    "CorsUrl": {
                        "value": "[variables('frontdoorCorsUrlToAddToAPIM')]"
                    }
                }
            },
            "dependsOn": [
                // added this in:
                // "[concat('deploy-region-', parameters('region'), '-apim')]",
                // "[concat('deploy-region-', parameters('region'), '-functionapp')]"
                "[concat('deploy-region-', parameters('region'), '-apim-backends')]"
            ]
        }
    ],
    "outputs": {
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        },
        "state": {
            "type": "array",
            "value": "[concat(array(json(concat('{\"resourceGroup\":\"',variables('resourceGroup'),'\",\"storageAccount\":\"', variables('storageAccountName'),'\",\"functionAppName\":\"', variables('functionAppName'), '\",\"apimUrl\":\"', variables('apimName'), '.azure-api.net\"' ,'}'))), parameters('state'))]"
        }
    }
}